from pyrogram import Client, filters
from evaluate_task import evaluate_task
import speech_recognition as sr
from pydub import AudioSegment
import asyncio

# –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –≤–∞—à–µ–≥–æ API_ID –∏ API_HASH
API_ID = "24081739"
API_HASH = "8bbd21a1b4be67a4084d2c4ddd3194a9"

app = Client("TaskManagerAI", api_id=API_ID, api_hash=API_HASH)


async def create_chat_and_send_message(username, task, unfulfilled_list_point, count_day):
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É "TASK:" –∫ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    unfulfilled_formatted = "\n".join([f"TASK: {item}" for item in unfulfilled_list_point])

    user = await app.get_users(username)
    user_id = user.id

    await app.send_message(
        user_id,
        f"–ü—Ä–∏–≤–µ—Ç!\n\n"
        f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ*: **{task}**\n"
        f"‚è≥ –°—Ä–æ–∫–∏ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ –∫–æ–Ω—Ü—É, –æ—Å—Ç–∞–ª–æ—Å—å **{count_day}** –¥–Ω–µ–π.\n\n"
        f"**–ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–¥–∑–∞–¥–∞—á–∏**:\n"
        f"{unfulfilled_formatted}\n\n"
        f"üìã –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–µ:\n"
        f"‚Äî –ß—Ç–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?\n"
        f"‚Äî –ö–∞–∫–∏–µ —à–∞–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è?\n\n"
        f"–°–ø–∞—Å–∏–±–æ! üòä"
    )


def extract_tasks_from_text(text, selected_numbers):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if not text:
        return []

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    tasks = [line.replace("TASK: ", "").strip() for line in text.strip().split('\n') if "TASK:" in line]

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª, –∏—Å–∫–ª—é—á–∞–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        numbers = [int(num) for num in selected_numbers.split() if num.isdigit()]
    except ValueError:
        return []

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º
    selected_tasks = [tasks[i - 1] for i in numbers if 1 <= i <= len(tasks)]

    return selected_tasks


@app.on_message(filters.private)
async def print_bot_responses(client, message):
    print(message)
    username = "Bebrbulinka"  # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å –∫–æ—Ç–æ—Ä—ã–º –º—ã —Ä–∞–±–æ—Ç–∞–µ–º
    task = "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —É—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤."
    user = await app.get_users(username)
    user_id = user.id
    formatted_history, history = await get_chat_history(client, user_id)
    last_message = history[0]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏

    if message.chat.username == username:
        if last_message.text and last_message.text.replace(" ", "").isdigit():
            extract_tasks = extract_tasks_from_text(history[1].text, last_message.text)
            extract_tasks_formatted = "\n".join([f"{i + 1}. TASK: {item}" for i, item in enumerate(extract_tasks)])
            await client.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω—ã:\n\n"
                                                       f"{extract_tasks_formatted}\n\n")
            print(extract_tasks)
            print(extract_tasks_formatted)
            print(history[1])
            print(last_message)

        else:
            rating, subtasks = evaluate_task("–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á", "–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫", message.text, task)

            subtasks_formatted = "\n".join([f"{i + 1}. TASK: {item}" for i, item in enumerate(subtasks)])

            await client.send_message(message.chat.id, f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {rating}\n\n"
            f" **–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –±—ã–ª–∏ —Ä–∞–∑–±–∏—Ç—ã –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ**\n"
            f"{subtasks_formatted}\n\n"
            f" **–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å**\n")



async def get_chat_history(client, chat_id, limit=5):
    history = []
    async for message in client.get_chat_history(chat_id, limit=limit):
        history.append(message)
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    formatted_history = []
    for msg in history:
        sender_name = "Assistant" if msg.from_user and msg.from_user.is_self else (
            msg.from_user.first_name if msg.from_user else 'Unknown')
        role = "assistant" if sender_name == "Assistant" else "user"
        content = ""
        if msg.text:
            content = msg.text
        elif msg.voice:
            audio_file = await msg.download()
            wav_file = audio_file.replace(".ogg", ".wav")
            AudioSegment.from_ogg(audio_file).export(wav_file, format="wav")
            with sr.AudioFile(wav_file) as source:
                audio_data = recognizer.record(source)
                try:
                    content = recognizer.recognize_google(audio_data, language="ru-RU")
                except sr.UnknownValueError:
                    content = "Audio not recognized"
                except sr.RequestError as e:
                    content = f"Could not request results; {e}"
            os.remove(audio_file)  # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            os.remove(wav_file)  # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        formatted_history.append({"role": role, "content": content})
    return formatted_history, history


async def main():
    unfulfilled_list_point = [
        "–°–¥–µ–ª–∞—Ç—å",
        "–ó–∞–ø—É—à–∏—Ç—å",
        "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",
        "–ü—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å"
    ]
    username = "Bebrbulinka"
    await app.start()
    await create_chat_and_send_message(username,
                                       "–°–¥–µ–ª–∞—Ç—å –¥–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞.",
                                       unfulfilled_list_point, 4)
    await asyncio.Event().wait()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Event –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π


if __name__ == "__main__":
    app.run(main())
